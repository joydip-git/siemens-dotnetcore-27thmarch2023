1. Collections
	List<T>, HashSet<T>

	HashSet<string> set = new HashSet<string>();
	set.Add("siemens"); //"siemens".GetHashCode()
	set.Add("siemens"); //"siemens".GetHashCode() and "siemens".Equals("siemens")

	Dictionary<Tkey,TValue>
	SortedList<Tkey,TValue>

2. Collection:

	A. Internalization of Sorting: (sorting logic is internal to the user-defined type)
	IComparable, IComparable<T> (System namespace)
	a. IComparable: int CompareTo(object obj)
	b. IComparable<T>: int CompareTo(T other)

	Use Case:
	If you want to create a List of user-defined type and then sort the list using Sort() method, you must implement either of the above two interfaces in that user-defined type, since the Sort() calls the CompareTo method in order to compare one object with another

	B. Externalization of Sorting: (sorting logic is external to the user-defined type)
	IComparer, IComparer<T> (System.Collecttions.Generic)
	a. IComparer: int Compare(Object x, Object y)
	a. IComparer<T>: int Compare(T x, T y)

	Use Case:
	If you want to create a List of user-defined type and then sort the list using Sort() method 
	i. based on choice, and/or
	ii. you do not want to write the sorting logic inside the user-defined type using CompareTo mehod, 
	you must implement either of the above two interfaces in an external type (not user-defined type) and then create an instance of that type and supply the same to Sort() method as parameter. In that case, Sort() method will call the Compare() method present in that external type.

//OOAD: SOLID
//OCP (Open Close Principle)
 
List<T> list = new List<T>();
class T:Icomparable<T>{ public int CompareTo(T other){ //code }}

TComparison tc = new TComparsion(1);
list.Sort(tc);

class TComparison : IComparer<T>
{
	int _choice;

	public TComparison(int choice) => _choice = choice;

	public int Compare(T x, T y){ //code }
}


Delegate:
	it stores reference(s) of function(s)
	using delegate you can invoke the function(s)

syntax:
	delegate return-type <del-name>(arguments...);

since you use delegate to store reference of some function(s), the signature of the delegate should be same as that of the function(s) or vice versa.
i.e., using the delegate you can refer and call those function(s) which matches the signature of the delegate

Note: in case of multi-cast delegate, your functions (that are trying to call using delegate) better not to have return type. Because, the delegate will call all functions one after another and will return you all the results, but you will get the result of last function call.



